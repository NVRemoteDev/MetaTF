<% include header %>
  <h1>Welcome to <%= title %></h1>
  <% console.log(req.foo); %>
  <hr />
  <div class="row-fluid">
  <div class="span7"</div>
  <h3>My code in action <small>If you'<span style="display:none">'</span>re here because of my resume.</small></h3>
  <p>Did I submit my resume to you, and you see this website listed as a sample of skill? Don't want to log in or can't log in? Check out the backpack viewer: <br />
  <a href="http://www.meta.tf/backpack/76561197991291041" style="color:#09c;text-decoration:underline;">Backpack 1</a><br />
  <a href="http://www.meta.tf/backpack/76561197993753022" style="color:#09c;text-decoration:underline;">Backpack 2</a></p>
  <p class="text-warning">Explanation:<bold></p>
  The backpack viewer utilizes an asynchronous file read to read into memory what the video game Team Fortress 2 calls an item schema.  The item schema is a JSON object which provides information on all of the items in the video game.  We then pull from the Steam API another schema holding all of the player'<span style="display:none">'</span>s items. By comparing the two, we get things such as the item names, properties, and customizations players have made to their items. 
  </p>
  <p>The player item API also provides an inventory token, which
  explains where the item resides, position wise, in the player'<span style="display:none">'</span>s backpack. To get the position of the item into a readable position, we first 
  convert it to a binary number. </p>
  <p class="text-warning">Algorithm Example:<br /></p>
  <p>
     Given inventory token: <span class="text-info">2147483</span><br />
     We convert it to binary: <span class="text-info">10000000000000000000000000110010</span><br />
     Then we split it in half, to two 16 digit binary numbers.  
     This is done because the last 16 digits in the binary number above equals the inventory position.<br /><br />
     Given the last 16 digits of the binary number, <span class="text-info">0000000000110010</span>, we convert it into an array of <span class="text-info">16 digits</span>, to get back into an integer using the formula n=digitCount (16 in this case); The total is then calculated with the formula "total = total + (2^(n - (i+1)) * array[i])"<br />
     The first calculation would therefore be: "<span class="text-info">total = 0 + ((2^15) * array_digit)</span>".  We would then increment i until we'<span style="display:none">'</span>ve finished looping through all of the digits.<br />
     The calculation in the example given above would equal <span class="text-info">slot 50</span>.
     You can see the two functions used here: <a href="http://pastebin.com/vPf9x101">pastebin.com/vPf9x101</a>
  </p>
  <p class="text-warning">More information on the site:</p>
    This site is made completely with server-side javascript utilizing Node.js<br />
    If you found us just by browsing, like our facebook page!  <a href="https://www.facebook.com/metatf">Meta.tf facebook page</a><br /><br />
    Some things may not work correctly yet, we'<span style="display:none">'</span>re still in pre-alpha.  Please check back soon.
  </p>
  </div>
  </div>
<% include footer %>